package poet;

import static org.junit.jupiter.api.Assertions.*;

import graph.ConcreteGraph;
import graph.Graph;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

class GraphPoetTest {

    /**
     * Test that a poem is correctly generated by inserting bridge words between adjacent words
     * when possible based on the provided corpus.
     */
    @Test
    void testPoemGeneration() throws IOException {
        // Create a temporary file with a sample corpus
        File sampleCorpus = File.createTempFile("sampleCorpus", ".txt");
        sampleCorpus.deleteOnExit();  // Ensures file is deleted when the JVM exits
        Files.writeString(sampleCorpus.toPath(), "This is a test of the Mugar Omni Theater sound system.");

        // Create a GraphPoet instance using the sample corpus
        GraphPoet poetInstance = new GraphPoet(sampleCorpus);

        // Define an input and the expected output poem
        String testInput = "Test the system.";
        String expectedPoem = "Test of the system.";

        // Assert that the generated poem matches the expected output
        assertEquals(expectedPoem, poetInstance.poem(testInput));
    }

    /**
     * Test that when no bridge word can be inserted between adjacent words in the input,
     * the output poem should remain the same as the input.
     */
    @Test
    void testPoemNoBridgeWords() throws IOException {
        // Create a temporary corpus with a simple sentence
        File basicCorpus = File.createTempFile("basicCorpus", ".txt");
        basicCorpus.deleteOnExit();  // Ensures file is deleted when the JVM exits
        Files.writeString(basicCorpus.toPath(), "Hello world!");

        // Create a GraphPoet instance based on the basic corpus
        GraphPoet poetInstance = new GraphPoet(basicCorpus);

        // Define an input and the expected output poem (no bridge words)
        String testInput = "Goodbye world.";
        String expectedPoem = "Goodbye world.";

        // Assert that the output poem matches the input (no changes)
        assertEquals(expectedPoem, poetInstance.poem(testInput));
    }

    /**
     * Test that an empty input string results in an empty poem.
     */
    @Test
    void testEmptyInput() throws IOException {
        // Create a temporary corpus
        File emptyCorpus = File.createTempFile("emptyCorpus", ".txt");
        emptyCorpus.deleteOnExit();  // Ensures file is deleted when the JVM exits
        Files.writeString(emptyCorpus.toPath(), "Hello world!");

        // Create a GraphPoet instance based on the empty corpus
        GraphPoet poetInstance = new GraphPoet(emptyCorpus);

        // Define an empty input and the expected empty output
        String testInput = "";
        String expectedPoem = "";

        // Assert that the output poem is empty, as expected
        assertEquals(expectedPoem, poetInstance.poem(testInput));
    }

    /**
     * Test that an exception is thrown when an invalid corpus file is provided.
     * Specifically, when the file does not exist.
     */
    @Test
    void testInvalidFile() {
        // Assert that an IOException is thrown when attempting to create a GraphPoet with a non-existent file
        assertThrows(IOException.class, () -> new GraphPoet(new File("nonexistentFile.txt")));
    }

    /**
     * Test that the toString() method of the GraphPoet class correctly includes information about the graph.
     */
    @Test
    public void testToStringWithGraphData() throws IOException {
        // Arrange: Create a poet instance with a simple corpus
        File simpleCorpus = createTempCorpus("Hello world. Hello everyone.");
        GraphPoet poetInstance = new GraphPoet(simpleCorpus);

        // Act: Call the toString() method
        String stringRepresentation = poetInstance.toString();

        // Assert: Verify that the string representation includes graph details
        assertTrue(stringRepresentation.contains("GraphPoet with graph: "), "toString() should include 'GraphPoet with graph:'.");
        assertTrue(stringRepresentation.contains("hello"), "Graph should include the word 'hello'.");
        assertTrue(stringRepresentation.contains("world"), "Graph should include the word 'world'.");
        assertTrue(stringRepresentation.contains("everyone"), "Graph should include the word 'everyone'.");
    }

    /**
     * Helper method to create a temporary corpus file with the provided content.
     * The file is automatically deleted when the JVM exits.
     *
     * @param content The content to write to the corpus file
     * @return The created temporary file
     * @throws IOException If an I/O error occurs
     */
    private File createTempCorpus(String content) throws IOException {
        // Create a temporary file
        File tempFile = File.createTempFile("tempCorpus", ".txt");
        tempFile.deleteOnExit();  // Ensures file is deleted when the JVM exits
        try (java.io.FileWriter fileWriter = new java.io.FileWriter(tempFile)) {
            fileWriter.write(content);  // Write the provided content to the file
        }
        return tempFile;  // Return the created file
    }
}
